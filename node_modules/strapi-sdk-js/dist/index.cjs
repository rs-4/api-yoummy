'use strict';

var axios = require('axios');
var defu = require('defu');
var qs = require('qs');
var Cookies = require('js-cookie');
var ufo = require('ufo');

function isBrowser() {
  return typeof window !== "undefined";
}

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const defaults = {
  url: "http://localhost:1337",
  prefix: "/api",
  store: {
    key: "strapi_jwt",
    useLocalStorage: false,
    cookieOptions: { path: "/" }
  },
  axiosOptions: {}
};
class Strapi {
  /**
   * Strapi SDK Constructor
   *
   * @constructor
   * @param {StrapiOptions} options? - Options in order to configure API URL, list your Content Types & extend the axios configuration
   * @param {string} options.url? - Your Strapi API URL, Default: http://localhost::1337
   * @param {StoreConfig} options.store? - Config the way you want to store JWT (Cookie or LocalStorage)
   * @param {AxiosRequestConfig} options.axiosOptions? - The list of your Content type on your Strapi API
   */
  constructor(options) {
    __publicField(this, "axios");
    __publicField(this, "options");
    __publicField(this, "user", null);
    const _options = defu(options || {}, defaults);
    this.options = {
      ..._options,
      url: ufo.cleanDoubleSlashes(_options == null ? void 0 : _options.url),
      prefix: ufo.cleanDoubleSlashes(_options == null ? void 0 : _options.prefix)
    };
    this.axios = axios.create({
      baseURL: ufo.joinURL(this.options.url, this.options.prefix),
      paramsSerializer: qs.stringify,
      ...this.options.axiosOptions
    });
    this.axios.interceptors.request.use((config) => {
      const token = this.getToken();
      if (token) {
        config.headers = {
          ...config.headers,
          Authorization: `Bearer ${token}`
        };
      }
      return config;
    });
  }
  /**
   * Basic axios request
   *
   * @param  {Method} method - HTTP method
   * @param  {string} url - Custom or Strapi API URL
   * @param  {AxiosRequestConfig} axiosConfig? - Custom Axios config
   * @returns Promise<T>
   */
  async request(method, url, axiosConfig) {
    try {
      const response = await this.axios.request({
        method,
        url,
        ...axiosConfig
      });
      return response.data;
    } catch (error) {
      const e = error;
      if (!e.response) {
        throw {
          data: null,
          error: {
            status: 500,
            name: "UnknownError",
            message: e.message,
            details: e
          }
        };
      } else {
        throw e.response.data;
      }
    }
  }
  /**
   * Authenticate user & retrieve his JWT
   *
   * @param  {StrapiAuthenticationData} data - User authentication form data: `identifier`, `password`
   * @param  {string} data.identifier - The email or username of the user
   * @param  {string} data.password - The password of the user
   * @returns Promise<StrapiAuthenticationResponse>
   */
  async login(data) {
    this.removeToken();
    const { user, jwt } = await this.request("post", "/auth/local", {
      data
    });
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  /**
   * Register a new user & retrieve JWT
   *
   * @param  {StrapiRegistrationData} data - New user registration data: `username`, `email`, `password`
   * @param  {string} data.username - Username of the new user
   * @param  {string} data.email - Email of the new user
   * @param  {string} data.password - Password of the new user
   * @returns Promise<StrapiAuthenticationResponse>
   */
  async register(data) {
    this.removeToken();
    const { user, jwt } = await this.request(
      "post",
      "/auth/local/register",
      {
        data
      }
    );
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  /**
   * Send an email to a user in order to reset his password
   *
   * @param  {StrapiForgotPasswordData} data - Forgot password data: `email`
   * @param  {string} data.email - Email of the user who forgot his password
   * @returns Promise<void>
   */
  async forgotPassword(data) {
    this.removeToken();
    return this.request("post", "/auth/forgot-password", { data });
  }
  /**
   * Change the password of the logged in user.
   * @author AnnikenYT
   *
   * @param {StrapiChangePasswordData} data - Change password data: `currentPassword`, `password`, `passwordConfirmation`
   * @param {string} data.currentPassword - The current password of the user
   * @param {string} data.password - The new password of the user
   * @param {string} data.passwordConfirmation - Confirmation of the new password of the user
   * @returns Promise<StrapiAuthenticationResponse>
   */
  async changePassword(data) {
    const { user, jwt } = await this.request(
      "post",
      "/auth/change-password",
      {
        data
      }
    );
    this.setToken(jwt);
    this.user = user;
    return { jwt, user };
  }
  /**
   * Reset the user password
   *
   * @param  {StrapiResetPasswordData} data - Reset password data object: `code`, `password`, `passwordConfirmation`
   * @param  {string} data.code - Code received by email after calling the `forgotPassword` method
   * @param  {string} data.password - New password of the user
   * @param  {string} data.passwordConfirmation - Confirmation of the new password of the user
   * @returns Promise<StrapiAuthenticationResponse>
   */
  async resetPassword(data) {
    this.removeToken();
    const { user, jwt } = await this.request(
      "post",
      "/auth/reset-password",
      {
        data
      }
    );
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  /**
   * Send programmatically an email to a user in order to confirm his account
   *
   * @param  {StrapiEmailConfirmationData} data - Email confirmation data: `email`
   * @param  {string} data.email - Email of the user who want to be confirmed
   * @returns Promise<void>
   */
  async sendEmailConfirmation(data) {
    return this.request("post", "/auth/send-email-confirmation", {
      data
    });
  }
  /**
   * Get the correct URL to authenticate with provider
   *
   * @param  {StrapiAuthProvider} provider - Provider name
   * @returns string
   */
  getProviderAuthenticationUrl(provider) {
    return ufo.joinURL(this.options.url, this.options.prefix, "connect", provider);
  }
  /**
   * Authenticate user with the token present on the URL or in `params`
   *
   * @param  {StrapiAuthProvider} provider - Provider name
   * @param  {string} access_token? - Access Token return from Strapi
   * @returns Promise<StrapiAuthenticationResponse>
   */
  async authenticateProvider(provider, access_token) {
    this.removeToken();
    if (isBrowser()) {
      const params = qs.parse(window.location.search, {
        ignoreQueryPrefix: true
      });
      if (params.access_token)
        access_token = params.access_token;
    }
    const { user, jwt } = await this.request(
      "get",
      `/auth/${provider}/callback`,
      {
        params: { access_token }
      }
    );
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  /**
   * Logout by removing authentication token
   *
   * @returns void
   */
  logout() {
    this.user = null;
    this.removeToken();
  }
  /**
   * Get a list of {content-type} entries
   *
   * @param  {string} contentType - Content type's name pluralized
   * @param  {StrapiRequestParams} params? - Query parameters
   * @returns Promise<StrapiResponse<T>>
   */
  find(contentType, params) {
    return this.request("get", `/${contentType}`, {
      params
    });
  }
  /**
   * Get a specific {content-type} entry
   *
   * @param  {string} contentType - Content type's name pluralized
   * @param  {string|number} id - ID of entry
   * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
   * @returns Promise<StrapiResponse<T>>
   */
  findOne(contentType, id, params) {
    return this.request("get", `/${contentType}/${id}`, {
      params
    });
  }
  /**
   * Create a {content-type} entry
   *
   * @param  {string} contentType - Content type's name pluralized
   * @param  {AxiosRequestConfig["data"]} data - New entry
   * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
   * @returns Promise<StrapiResponse<T>>
   */
  create(contentType, data, params) {
    return this.request("post", `/${contentType}`, {
      data: { data },
      params
    });
  }
  /**
   * Update a specific entry
   *
   * @param  {string} contentType - Content type's name pluralized
   * @param  {string|number} id - ID of entry to be updated
   * @param  {AxiosRequestConfig["data"]} data - New entry data
   * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
   * @returns Promise<StrapiResponse<T>>
   */
  update(contentType, id, data, params) {
    return this.request("put", `/${contentType}/${id}`, {
      data: { data },
      params
    });
  }
  /**
   * Delete en entry
   *
   * @param  {string} contentType - Content type's name pluralized
   * @param  {string|number} id - ID of entry to be deleted
   * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
   * @returns Promise<StrapiResponse<T>>
   */
  delete(contentType, id, params) {
    return this.request("delete", `/${contentType}/${id}`, {
      params
    });
  }
  /**
   * Refresh local data of the logged-in user
   *
   * @returns Promise<StrapiUser>
   */
  async fetchUser() {
    try {
      const user = await this.request("get", "/users/me");
      this.user = user;
    } catch (e) {
      this.logout();
    }
    return this.user;
  }
  /**
   * Retrieve token from chosen storage
   *
   * @returns string | null
   */
  getToken() {
    const { useLocalStorage, key } = this.options.store;
    if (isBrowser()) {
      const token = useLocalStorage ? window.localStorage.getItem(key) : Cookies.get(key);
      if (typeof token === "undefined")
        return null;
      return token;
    }
    return null;
  }
  /**
   * Set token in chosen storage
   *
   * @param  {string} token - Token retrieve from login or register method
   * @returns void
   */
  setToken(token) {
    const { useLocalStorage, key, cookieOptions } = this.options.store;
    if (isBrowser()) {
      useLocalStorage ? window.localStorage.setItem(key, token) : Cookies.set(key, token, cookieOptions);
    }
  }
  /**
   * Remove token from chosen storage (Cookies or Local)
   *
   * @returns void
   */
  removeToken() {
    const { useLocalStorage, key } = this.options.store;
    if (isBrowser()) {
      useLocalStorage ? window.localStorage.removeItem(key) : Cookies.remove(key);
    }
  }
}

module.exports = Strapi;
